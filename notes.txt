Needs Rust up, VC, C++ Build tools.
Memory only stores binary data, but anything can be represented with binary. 
Code is automatically converted to binary representations. 
In rust, variables can be made mutable with the mut keyword. However variables are immutable.


let hello = "hello";
let mut my_name = "Jack";
let my_float = 0.5;
let my_bool = true;


Functions need the fn key word. then we add the name_of_function, next function_paramaters. 
The  -> says what this fucntion returns.we can add the type of paramter accepted by function 
We can specify the type of data that we are returning. 

fn add(a: i32, b:i32) -> i32 {
    a + b
}

let x = add(1, 1);

Macros are defined by the !
let life = 145;
println!(life)
println!("{:?}", life)
"{:?}" - Debug mode.
Macros generate additional rust code. Functions perform actions. Println lis a macro. 

Control Flow
let a =1;
let b = 2;
let c = 3;

if a < 99 {
    println!("Small Number");
} else {
    println!("Large number");
}


if a > 200 {
    println!("Massive Number");
} else if a > 99 {
        println!("Big Number");
} else {
    println!("Small Number");
}


Repition
In Rust, while loops is done with the loop keyword. Loop is an infinite loop, we can break out of when a condition is reached.
While is another loop that is conditional, automatically checks condtions

let mut a = 0;

loop {
    if a == 5 {
        break;
    }
    println!("{:?}", a);
    a = a+1;
}


### OR

while (a!=5){
    println!("{:?}", a);
    a+=1;
}

We can break out of both loops. 

Run files by cargo run --bin a1

Match
Used to add logic to programs. All options must be accounted for. 
Match works on expressions not statements.

let some_bool = true;
match some_bool {
    true => println!("its true"),
    false => println!("its false"),
}

in match if we use an _ (underscore) in the expression, it pretty much means everything else not listed. 
compilers tell us if a possibility is not included, Match allows us to write more robust code. 
Enums allow us to work with data in a type safe manner. Enums are one of multiiple different possibilities. Eacvh possibility is a variant.
This results in more robust code

enum Direction {
    Up,
    Down,
    Left,
    Right,
}

we can provide enumeration and match. 
This enforces that every possibility can be checked. 

fn which_way(go: Direction) {
    match go {
        Direction::Up => "up",
        ...
    }
}

Enums are created outside of the main function, possibly to memeory constraints. 
Enums can be used to create our own type

Struct allows us to create a datatype with multiple pieces of data. 
Each piece of data is called a field. Similar data can be grouped and moved around in the code

struct ShippingBox {
    depth: i32,
    width: 132,
    height: i32,
}

let my_box = ShippingBox {
    depth:3,
    width:2,
    height:5,
};


let tall = my_box.height;

Tupel is a record. They store data anonymously and non named fields. 

enum Access {
    Full,
}

fn one_two_three() -> (i32, i32, i32){
    (1,2,3)
}

let numbers = one_two_three();
let (x,y,z) = one_two_three(); Destructured
println!("{:?}, {:?}", x, numbers.0);
println!("{:?}, {:?}", y, numbers.1);


let (employee, access) = ("Jake", Access:Full); Different data types. Always best to destructure tuples. 