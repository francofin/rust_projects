Web assembly is super fast. 
Can be written in most languages. 
We write rust code and rust compiler compiles rust code into webassembly isntrcutions which can be loaded into the browser. 
This is just like loading js into the browser. 

Web assembly can be executed in the browser. 
Suitable for 3d apps, VR, CAD applications. 
Every node is wrapped in normal brackets
Web Assembly has 132, 164 and f32 and f64 only has these types. 
result is a keyword to return something from a function
1. Define module (module )
2. Under node is the funciton. 
3. Must export the function 
4. first export is the name that will be used in the js fucntion. 

(module 
    (func $sum (param $a i32) (param $b i32) (result i32)
        local.get $a 
        local.get $b 
        i32.add
    )
  (export "first_export" (func $sum))
)

const wasmInstance =
      new WebAssembly.Instance(wasmModule, {});
const { first_export } = wasmInstance.exports;
for (let i = 0; i < 10; i++) {
  console.log(first_export(i, i));
}


xxd -g1 <file name.wasm> to see what webassembly code looks like. 

In the public folder we should put in our assets like images, Essential files should be in the context of the the folder not the public. 
It is eventually copied to public folder. 
In plugins, to: './' says place in public folder. 

We can use fetch or axios to get the wasm file into the array. 

We can import JS code into Webassembly to be executed.

WASM Memory
We can create memory in webassembly and export to JS. 
We can create memory in JS and import it to WASM


memory 1 means we want to create 1 page of memory which has around 64 kb. We export with a named var "mem" in this case
By calling memory 0, we are accessing the first memory creted. We cqn create named aliases for the memory slots. 
data will be used to load data into the memory. Load Hello in the first spot into the memory starting at index 0.

I need to export the memory into JS

(module
    (import "console" "log" (func $myLog))
    (import "console" "error" (func $myError))
    (memory $myMem 1)
    (memory (import "js" "jsMem") 1)
    (data (i32.const 0) "Hello")
    (func $sum (param $a i32) (param $b i32) (result i32)
        call $myLog 
        call $myError
        local.get $a
        local.get $b
        i32.add
    )
    (export "mem" (memory $myMem))
    (export "sum" (func $sum))

)


We use a crate to copile rust code to Wasm. 
cdylib is used for building external libraries. Integrates rust with other code. 
On Windows add cargo install wasm-pack --no-default-features to install wasm-pack
Run wasm-pack build --target web


We need to import the functions generated by wasm into the index.js code. Add name from package.json generated by wasm to depenedncies 
in package.json in web folder, the value will point to the location in the total folder and we npm install to get the package. 
We can then import or require that package as needed. 

functions in your lib will be added to the pkg created by wasm pack.